<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ggit.db.mapper.RepoMapper">
    <select id="repo" resultType="com.ggit.vo.RepoVo"> SELECT * FROM repo; </select>
    <select id="nameForIdx" resultType="int"> select idx from repo where name = #{repoName} and
        owner=(select idx from member where nick = #{ownerNick}) </select>
    <!-- member,repomem,repo 세개 모두다 검색 -->
    <!-- SELECT repo.idx as repo_idx,repo.name as repo_name,repo.createDate as repo_crateDate
    ,repo.public as repo_publ,repo.owner as repo_owner,repo.fork as repo_fork,
            repomem.idx
    as repomem_idx,repomem.repo as repomem_repo,repomem.member as repomem_member,
            member.idx
    as member_idx,member.nick as member_nick,member.email as member_email,
            member.pw as
    member_pw, member.img as member_img,member.auth as member_auth,member.date as member_date
            FROM
    repo,repomem,member where repomem.repo=repo.idx and repo.owner=member.idx and
    repomem.member=${member}; -->

    <select id="checkRepo" resultType="int"> select count(idx) from repo where owner=${owner} and
        name = #{repoName} </select>
    <insert id="createRepo"> insert into repo(name,public,owner,clone,description)
        value(#{name},${publ},${owner},#{clone},#{description}); <selectKey keyProperty="idx"
            resultType="int" order="AFTER"> select LAST_INSERT_ID() </selectKey>
    </insert>
    <select id="selectHistory" resultType="com.ggit.vo.RepositoriesVO"> SELECT push.message as
        push_message, push.token as push_token,push.date as push_date,member.nick as member_nick,
        push.before_token as before_token,push.selected as selected from push,member where push.repo
        =(select idx from repo where name= #{repo} and owner= (select idx from member where nick=
        #{ownerNick})) and push.branch = ${branch} and push.member=member.idx order by push.date
        desc </select>
    <select id="selectRepositories" resultType="com.ggit.vo.RepositoriesVO"> SELECT repo.idx as
        repo_idx, repo.name as repo_name, repo.createDate as repo_crateDate, repo.public as
        repo_publ, repo.owner as repo_owner, repo.fork as repo_fork, repomem.idx as repomem_idx,
        repomem.repo as repomem_repo, repomem.member as repomem_member, repomem.sort as
        repomem_sort, member.idx as member_idx,member.nick as member_nick ,(select date from push
        where repo=repo.idx ORDER BY date DESC LIMIT 1) as push_date FROM repo,repomem,member where
        repomem.repo=repo.idx and repo.owner=member.idx and repomem.member=(select idx from member
        where nick = #{nick}) ORDER BY repomem.sort ASC ,repo.createDate desc </select>

    <select id="repoIdxByNickName" resultType="int"> select repo.idx from repo where
        repo.name=#{reponame} and owner=(select member.idx from member where member.nick =#{nick}) </select>
    <select id="clone" resultType="com.ggit.vo.RepositoriesVO"> select repo.idx as repo_idx
        ,push.token as push_token from repo , push where repo.clone=#{clone} and repo.idx =
        push.repo ORDER BY push.date DESC LIMIT 1 </select>
    <select id="pulltoken" resultType="com.ggit.vo.RepositoriesVO"> select token as push_token,
        before_token from push where repo = ${repo} and branch = ${member} ORDER BY selected
        DESC,date DESC LIMIT 1 </select>

    <select id="selectRepositorycode" resultType="com.ggit.vo.RepositoriesVO"> SELECT push.member as
        push_member, push.message as push_message, push.token as push_token, push.date as push_date,
        push.repo as push_repo, member.nick as member_nick,(select count(push.token) from push where
        repo = ${repoIdx}) as commits FROM push, member WHERE member.idx = push.member and push.repo
        = ${repoIdx} and push.branch =0 ORDER BY push.date DESC LIMIT 1 <!-- 최근 한 값만 -->

    </select>
    <select id="selectRepositoryMyCode" resultType="com.ggit.vo.RepositoriesVO"> SELECT push.member
        as push_member, push.message as push_message, push.token as push_token, push.date as
        push_date, push.repo as push_repo, member.nick as member_nick,(select count(push.token) from
        push where repo = ${repoIdx}) as commits FROM push, member WHERE member.idx = push.member
        and push.repo = ${repoIdx} and push.branch = ${member} ORDER BY push.selected DESC,push.date
        DESC LIMIT 1 <!-- 기본구조는 selectRepositorycode와 동일 하지만 branch에서 member 을 찾는다-->

        <!-- 중요! orderBy 처음으로 push 내림차순 => selected가 1인것을 찾고 위해 그거 하나를 뽑는다-->
        <!-- selected 가 1이 없다면(히스토리에서 현재작업영역으로 지정하지 않았다는 뜻 ) 다 0일것이다-->
        <!-- 그럼 2순위로 date 기준으로 최신거 하나를 뽑는다-->
        <!-- 이게 모두 없다면 작업영역 자체가 없다는 것으로 controller에서 selectRepositorycode(메인)을 호출할것이다.-->


    </select>


    <select id="selectRepositorycontributors" resultType="com.ggit.vo.RepositoriesVO"> SELECT
        member.img as member_img, member.nick as member_nick FROM member, repomem WHERE member.idx =
        repomem.member and repomem.repo = ${repoIdx}; </select>

    <select id="selectRepositorystar" resultType="com.ggit.vo.RepositoriesVO"> SELECT star.repo as
        star_repo, star.member as star_member FROM star WHERE star.repo = ${repoIdx}; </select>

    <select id="selectRepositorycount" resultType="int"> SELECT count(repomem.idx) FROM repomem
        WHERE repomem.member=(select member.idx from member where member.nick =#{nick}); </select>

    <select id="selectRepositorystarcount" resultType="int"> SELECT count(star.member) FROM star
        WHERE star.member = (select member.idx from member where member.nick=#{nick}) </select>

    <select id="selectRepoClone" resultType="String"> SELECT repo.clone as repo_clone FROM
        repo,member WHERE member.idx = (SELECT repo.owner from repo where repo.idx=${repoIdx})and
        repo.idx=${repoIdx}; </select>

    <update id="repo_rename"> update repo set name=#{repo_rename} where idx = #{idx} </update>

    <select id="getrepomessage" resultType="com.ggit.vo.RepoVo"> select description from repo where
        idx=#{idx} </select>

    <update id="repo_remessage_func"> update repo set description=#{description} where idx=#{idx} </update>

    <!-- 저장소 이름으로 저장소 존재 여부 확인 -->
    <select id="find_repo" resultType="int"> select idx from repo where name = #{name} </select>

    <!-- 저장소에 속해 있는지(저장소 멤버) 확인 -->
    <select id="repoMemCheck" resultType="com.ggit.vo.RepoVo"> select * from repomem where repo =
        #{repo_idx} and member = #{u_idx}; </select>

    <insert id="pinClick"> insert into pin(member, repo, sort) values(#{u_idx}, #{repo_idx},
        #{sort_idx}); </insert>

    <select id="pinCheck" resultType="com.ggit.vo.RepoVo">
        select * 
        from pin
        where repo=#{repo_idx} and member=#{u_idx}
    </select>

    <delete id="pinClickOff">
        delete from pin where repo= #{repo_idx} and member= #{u_idx}
    </delete>

</mapper>